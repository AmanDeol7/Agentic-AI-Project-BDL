# Offline Backend Proxy Dockerfile for Agentic AI Project
FROM python:3.12-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy the pre-downloaded packages and requirements
COPY packages/ /app/packages/
COPY requirements.txt pyproject.toml ./

# Install Python dependencies from local packages
RUN pip install --no-index --find-links /app/packages/ -r requirements.txt

# Create a simple proxy script
COPY <<EOF /app/proxy.py
import os
import httpx
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import Response
import uvicorn
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Backend Proxy")

MAIN_SERVER_URL = os.getenv("MAIN_SERVER_URL", "http://localhost:8000")
CLIENT_ID = os.getenv("CLIENT_ID", "1")
PROXY_PORT = int(os.getenv("PROXY_PORT", "8001"))

logger.info(f"Starting proxy for Client {CLIENT_ID}")
logger.info(f"Main server URL: {MAIN_SERVER_URL}")
logger.info(f"Proxy port: {PROXY_PORT}")

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{MAIN_SERVER_URL}/health", timeout=5.0)
            if response.status_code == 200:
                return {
                    "status": "healthy", 
                    "client_id": CLIENT_ID,
                    "main_server": "connected"
                }
            else:
                return {
                    "status": "degraded", 
                    "client_id": CLIENT_ID,
                    "main_server": "unreachable"
                }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy", 
            "client_id": CLIENT_ID,
            "main_server": "error",
            "error": str(e)
        }

@app.api_route("/{path:path}", methods=["GET", "POST", "PUT", "DELETE", "PATCH"])
async def proxy_request(request: Request, path: str):
    """Proxy all requests to the main server"""
    try:
        url = f"{MAIN_SERVER_URL}/{path}"
        
        # Get request data
        headers = dict(request.headers)
        headers.pop('host', None)  # Remove host header to avoid conflicts
        headers['X-Client-ID'] = CLIENT_ID
        
        params = dict(request.query_params)
        
        # Handle request body
        body = None
        if request.method in ["POST", "PUT", "PATCH"]:
            body = await request.body()
        
        # Make request to main server
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.request(
                method=request.method,
                url=url,
                headers=headers,
                params=params,
                content=body
            )
            
            # Return response
            return Response(
                content=response.content,
                status_code=response.status_code,
                headers=dict(response.headers),
                media_type=response.headers.get("content-type")
            )
            
    except httpx.TimeoutException:
        logger.error(f"Timeout connecting to main server: {MAIN_SERVER_URL}")
        raise HTTPException(status_code=504, detail="Gateway timeout")
    except httpx.ConnectError:
        logger.error(f"Cannot connect to main server: {MAIN_SERVER_URL}")
        raise HTTPException(status_code=502, detail="Bad gateway - cannot connect to main server")
    except Exception as e:
        logger.error(f"Proxy error: {e}")
        raise HTTPException(status_code=500, detail=f"Internal proxy error: {str(e)}")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PROXY_PORT)
EOF

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Expose port (will be set dynamically)
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PROXY_PORT:-8001}/health || exit 1

# Run the proxy
CMD ["python", "proxy.py"]
