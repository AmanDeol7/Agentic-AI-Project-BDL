FROM python:3.12-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install basic Python dependencies for proxy functionality
RUN pip install --no-cache-dir fastapi uvicorn httpx

# Create a simple proxy script
COPY <<EOF /app/proxy.py
import os
import httpx
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import Response
import uvicorn
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Backend Proxy")

MAIN_SERVER_URL = os.getenv("MAIN_SERVER_URL", "http://localhost:8000")
CLIENT_ID = os.getenv("CLIENT_ID", "1")
PROXY_PORT = int(os.getenv("PROXY_PORT", "8001"))

logger.info(f"Starting proxy for client {CLIENT_ID}, forwarding to {MAIN_SERVER_URL}")

@app.get("/health")
async def health():
    return {"status": "healthy", "client_id": CLIENT_ID, "main_server": MAIN_SERVER_URL}

@app.api_route("/{path:path}", methods=["GET", "POST", "PUT", "DELETE", "PATCH"])
async def proxy(request: Request, path: str):
    """Proxy all requests to the main server"""
    # Handle root path
    if not path:
        path = ""
    
    url = f"{MAIN_SERVER_URL}/{path}"
    logger.info(f"Proxying {request.method} {path} to {url}")
    
    # Get request data
    headers = dict(request.headers)
    # Remove host header to avoid conflicts
    headers.pop("host", None)
    # Add client identification
    headers["x-proxy-client-id"] = CLIENT_ID
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            if request.method == "GET":
                response = await client.get(
                    url, 
                    params=request.query_params,
                    headers=headers
                )
            elif request.method == "DELETE":
                response = await client.delete(
                    url,
                    params=request.query_params,
                    headers=headers
                )
            else:
                body = await request.body()
                content_type = request.headers.get("content-type", "")
                
                if "multipart/form-data" in content_type:
                    # Handle file uploads differently
                    files = {}
                    form_data = await request.form()
                    for key, value in form_data.items():
                        if hasattr(value, 'read'):  # File-like object
                            files[key] = (value.filename, await value.read(), value.content_type)
                    
                    response = await client.request(
                        request.method,
                        url,
                        files=files,
                        params=request.query_params,
                        headers={k: v for k, v in headers.items() if k.lower() != "content-type"}
                    )
                else:
                    response = await client.request(
                        request.method,
                        url,
                        content=body,
                        params=request.query_params,
                        headers=headers
                    )
        
        logger.info(f"Response: {response.status_code}")
        return Response(
            content=response.content,
            status_code=response.status_code,
            headers=dict(response.headers)
        )
    
    except httpx.ConnectError as e:
        logger.error(f"Connection error: {e}")
        raise HTTPException(status_code=502, detail=f"Cannot connect to main server: {str(e)}")
    except httpx.TimeoutException as e:
        logger.error(f"Timeout error: {e}")
        raise HTTPException(status_code=504, detail=f"Main server timeout: {str(e)}")
    except Exception as e:
        logger.error(f"Proxy error: {e}")
        raise HTTPException(status_code=502, detail=f"Proxy error: {str(e)}")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PROXY_PORT)
EOF

# Set environment variables
ENV PYTHONUNBUFFERED=1

# Expose port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Run the proxy
CMD ["python", "proxy.py"]
